#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
GI·∫¢I TH√çCH MEAN (TRUNG B√åNH) V√Ä C√ÅCH T√çNH
"""

import numpy as np
import pandas as pd

def demonstrate_mean_calculation():
    """Minh h·ªça c√°ch t√≠nh mean"""
    
    print("=" * 80)
    print("MEAN (TRUNG B√åNH) L√Ä G√å V√Ä C√ÅCH T√çNH")
    print("=" * 80)
    
    # V√≠ d·ª• 1: T√≠nh mean ƒë∆°n gi·∫£n
    print("\nüìä V√ç D·ª§ 1: T√çNH MEAN ƒê∆†N GI·∫¢N")
    print("-" * 40)
    
    numbers = [2, 4, 6, 8, 10]
    print(f"Numbers: {numbers}")
    
    # C√°ch t√≠nh th·ªß c√¥ng
    total = sum(numbers)
    count = len(numbers)
    mean_manual = total / count
    
    print(f"T·ªïng: {total}")
    print(f"S·ªë l∆∞·ª£ng: {count}")
    print(f"Mean (th·ªß c√¥ng): {total} √∑ {count} = {mean_manual}")
    
    # C√°ch t√≠nh b·∫±ng numpy
    mean_numpy = np.mean(numbers)
    print(f"Mean (numpy): {mean_numpy}")
    
    # V√≠ d·ª• 2: Mean v·ªõi gi√° tr·ªã √¢m
    print("\nüìä V√ç D·ª§ 2: MEAN V·ªöI GI√Å TR·ªä √ÇM")
    print("-" * 40)
    
    numbers_with_negative = [1, -2, 3, -4, 5]
    print(f"Numbers: {numbers_with_negative}")
    
    mean_negative = np.mean(numbers_with_negative)
    print(f"Mean: {mean_negative}")
    
    # Gi·∫£i th√≠ch
    total_negative = sum(numbers_with_negative)
    count_negative = len(numbers_with_negative)
    print(f"T·ªïng: {total_negative}")
    print(f"S·ªë l∆∞·ª£ng: {count_negative}")
    print(f"Mean: {total_negative} √∑ {count_negative} = {mean_negative}")
    
    # V√≠ d·ª• 3: Mean c·ªßa feature vectors
    print("\nüìä V√ç D·ª§ 3: MEAN C·ª¶A FEATURE VECTORS")
    print("-" * 40)
    
    # Gi·∫£ l·∫≠p feature vectors c·ªßa nhi·ªÅu games
    feature_vectors = np.array([
        [0.8, 0.6, 0.4, 0.2, 0.1, -0.3, -0.5, -0.7, -0.8, -0.9],  # Game 1
        [0.7, 0.8, 0.3, 0.1, 0.0, -0.4, -0.6, -0.8, -0.9, -0.8],  # Game 2
        [0.6, 0.7, 0.5, 0.3, 0.2, -0.2, -0.4, -0.6, -0.7, -0.8],  # Game 3
        [-0.8, -0.6, -0.4, -0.2, -0.1, 0.3, 0.5, 0.7, 0.8, 0.9],  # Game 4
        [0.2, 0.4, 0.6, 0.8, 0.9, 0.1, -0.2, -0.4, -0.6, -0.8]   # Game 5
    ])
    
    print("Feature vectors:")
    for i, vector in enumerate(feature_vectors):
        print(f"  Game {i+1}: {vector}")
    
    # T√≠nh mean c·ªßa t·ª´ng dimension
    mean_per_dimension = np.mean(feature_vectors, axis=0)
    print(f"\nMean per dimension: {mean_per_dimension}")
    
    # T√≠nh mean t·ªïng th·ªÉ
    mean_overall = np.mean(feature_vectors)
    print(f"Mean overall: {mean_overall}")
    
    return mean_per_dimension, mean_overall

def explain_standardization():
    """Gi·∫£i th√≠ch chu·∫©n h√≥a v·ªõi mean"""
    
    print("\n" + "=" * 80)
    print("CHU·∫®N H√ìA V·ªöI MEAN (STANDARDIZATION)")
    print("=" * 80)
    
    # V√≠ d·ª• chu·∫©n h√≥a
    print("\nüîç V√ç D·ª§ CHU·∫®N H√ìA:")
    print("-" * 40)
    
    # D·ªØ li·ªáu g·ªëc
    original_data = np.array([10, 20, 30, 40, 50])
    print(f"D·ªØ li·ªáu g·ªëc: {original_data}")
    
    # T√≠nh mean v√† std
    mean = np.mean(original_data)
    std = np.std(original_data)
    print(f"Mean: {mean}")
    print(f"Standard deviation: {std}")
    
    # Chu·∫©n h√≥a: (x - mean) / std
    standardized_data = (original_data - mean) / std
    print(f"D·ªØ li·ªáu chu·∫©n h√≥a: {standardized_data}")
    
    # Ki·ªÉm tra mean v√† std sau chu·∫©n h√≥a
    new_mean = np.mean(standardized_data)
    new_std = np.std(standardized_data)
    print(f"Mean sau chu·∫©n h√≥a: {new_mean}")
    print(f"Std sau chu·∫©n h√≥a: {new_std}")
    
    print("\nüí° GI·∫¢I TH√çCH:")
    print("‚Ä¢ Mean sau chu·∫©n h√≥a = 0")
    print("‚Ä¢ Std sau chu·∫©n h√≥a = 1")
    print("‚Ä¢ Gi√° tr·ªã √¢m: < mean g·ªëc")
    print("‚Ä¢ Gi√° tr·ªã d∆∞∆°ng: > mean g·ªëc")
    print("‚Ä¢ Gi√° tr·ªã 0: = mean g·ªëc")

def demonstrate_with_game_features():
    """Minh h·ªça v·ªõi game features th·ª±c t·∫ø"""
    
    print("\n" + "=" * 80)
    print("V√ç D·ª§ V·ªöI GAME FEATURES TH·ª∞C T·∫æ")
    print("=" * 80)
    
    # Gi·∫£ l·∫≠p features c·ªßa nhi·ªÅu games
    games_features = {
        'Candy Crush': [0.8, 0.6, 0.4, 0.2, 0.1, -0.3, -0.5, -0.7, -0.8, -0.9],
        'Call of Duty': [-0.8, -0.6, -0.4, -0.2, -0.1, 0.3, 0.5, 0.7, 0.8, 0.9],
        'Minecraft': [0.2, 0.4, 0.6, 0.8, 0.9, 0.1, -0.2, -0.4, -0.6, -0.8],
        'Tetris': [0.5, 0.3, 0.1, -0.1, -0.3, -0.5, -0.7, -0.9, -0.8, -0.6],
        'FIFA': [-0.1, -0.3, -0.5, -0.7, -0.9, 0.8, 0.6, 0.4, 0.2, 0.0]
    }
    
    print("Game features:")
    for game, features in games_features.items():
        print(f"  {game}: {features}")
    
    # T√≠nh mean c·ªßa t·ª´ng feature
    all_features = np.array(list(games_features.values()))
    mean_features = np.mean(all_features, axis=0)
    
    print(f"\nMean c·ªßa t·ª´ng feature: {mean_features}")
    
    # Gi·∫£i th√≠ch √Ω nghƒ©a
    print("\nüí° √ù NGHƒ®A:")
    print("‚Ä¢ Mean > 0: Feature n√†y ph·ªï bi·∫øn trong dataset")
    print("‚Ä¢ Mean < 0: Feature n√†y √≠t ph·ªï bi·∫øn trong dataset")
    print("‚Ä¢ Mean ‚âà 0: Feature n√†y trung b√¨nh trong dataset")
    
    # V√≠ d·ª• c·ª• th·ªÉ
    print("\nüéØ V√ç D·ª§ C·ª§ TH·ªÇ:")
    feature_names = ['puzzle', 'casual', 'mobile', 'simple', 'easy', 'action', 'shooter', 'competitive', 'complex', 'hardcore']
    for i, (name, mean_val) in enumerate(zip(feature_names, mean_features)):
        if mean_val > 0.1:
            print(f"  {name}: {mean_val:.3f} (ph·ªï bi·∫øn)")
        elif mean_val < -0.1:
            print(f"  {name}: {mean_val:.3f} (√≠t ph·ªï bi·∫øn)")
        else:
            print(f"  {name}: {mean_val:.3f} (trung b√¨nh)")

if __name__ == "__main__":
    # Ch·∫°y v√≠ d·ª•
    mean_per_dim, mean_overall = demonstrate_mean_calculation()
    explain_standardization()
    demonstrate_with_game_features()
    
    print("\n" + "=" * 80)
    print("K·∫æT LU·∫¨N")
    print("=" * 80)
    print("Mean (trung b√¨nh) l√†:")
    print("1. T·ªïng t·∫•t c·∫£ gi√° tr·ªã √∑ S·ªë l∆∞·ª£ng gi√° tr·ªã")
    print("2. ƒêi·ªÉm trung t√¢m c·ªßa dataset")
    print("3. D√πng ƒë·ªÉ chu·∫©n h√≥a d·ªØ li·ªáu")
    print("4. Mean = 0 sau chu·∫©n h√≥a")
    print("5. Gi√° tr·ªã √¢m = < mean, Gi√° tr·ªã d∆∞∆°ng = > mean")
