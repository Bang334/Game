#!/usr/bin/env python3
"""
Script minh h·ªça t·ª´ng b∆∞·ªõc SVD v·ªõi ma tr·∫≠n c·ª• th·ªÉ
"""

import numpy as np
from scipy.sparse.linalg import svds

def print_matrix(matrix, title, decimals=3):
    """In ma tr·∫≠n v·ªõi format ƒë·∫πp"""
    print(f"\n{'='*60}")
    print(f"{title}")
    print('='*60)
    print(f"Shape: {matrix.shape}")
    print()
    
    # Format ma tr·∫≠n
    if matrix.ndim == 1:
        # Vector
        for i, val in enumerate(matrix):
            print(f"  [{i:2d}] = {val:.{decimals}f}")
    else:
        # Matrix
        for i in range(matrix.shape[0]):
            row_str = "  ["
            for j in range(matrix.shape[1]):
                row_str += f"{matrix[i,j]:.{decimals}f}"
                if j < matrix.shape[1] - 1:
                    row_str += ", "
            row_str += "]"
            print(row_str)

def svd_step_by_step_demo():
    """Minh h·ªça t·ª´ng b∆∞·ªõc SVD"""
    print("üéØ MINH H·ªåA T·ª™NG B∆Ø·ªöC SVD")
    print("="*80)
    
    # B∆∞·ªõc 1: T·∫°o ma tr·∫≠n User-Item
    print("\nüìä B∆Ø·ªöC 1: T·∫†O MA TR·∫¨N USER-ITEM")
    print("-"*40)
    
    # Ma tr·∫≠n m·∫´u (3 users, 6 games)
    user_item_matrix = np.array([
        [8.0, 5.0, 8.0, 3.0, 0.0, 0.0],  # User 1
        [0.0, 0.0, 0.0, 5.0, 5.0, 0.0],  # User 2  
        [3.0, 0.0, 0.0, 0.0, 0.0, 0.0]   # User 3
    ])
    
    print_matrix(user_item_matrix, "MA TR·∫¨N USER-ITEM G·ªêC")
    
    # B∆∞·ªõc 2: T√≠nh mean c·ªßa m·ªói user
    print("\nüìä B∆Ø·ªöC 2: T√çNH MEAN C·ª¶A M·ªñI USER")
    print("-"*40)
    
    user_ratings_mean = np.mean(user_item_matrix, axis=1)
    print_matrix(user_ratings_mean, "MEAN RATING C·ª¶A M·ªñI USER")
    
    # Gi·∫£i th√≠ch
    print("\nüí° Gi·∫£i th√≠ch:")
    print("User 1 mean = (8.0 + 5.0 + 8.0 + 3.0 + 0.0 + 0.0) / 6 = 4.0")
    print("User 2 mean = (0.0 + 0.0 + 0.0 + 5.0 + 5.0 + 0.0) / 6 = 1.667")
    print("User 3 mean = (3.0 + 0.0 + 0.0 + 0.0 + 0.0 + 0.0) / 6 = 0.5")
    
    # B∆∞·ªõc 3: Chu·∫©n h√≥a (tr·ª´ mean)
    print("\nüìä B∆Ø·ªöC 3: CHU·∫®N H√ìA (TR·ª™ MEAN)")
    print("-"*40)
    
    ratings_demeaned = user_item_matrix - user_ratings_mean.reshape(-1, 1)
    print_matrix(ratings_demeaned, "MA TR·∫¨N SAU KHI CHU·∫®N H√ìA")
    
    # Gi·∫£i th√≠ch
    print("\nüí° Gi·∫£i th√≠ch:")
    print("User 1: [8.0, 5.0, 8.0, 3.0, 0.0, 0.0] - 4.0 = [4.0, 1.0, 4.0, -1.0, -4.0, -4.0]")
    print("User 2: [0.0, 0.0, 0.0, 5.0, 5.0, 0.0] - 1.667 = [-1.667, -1.667, -1.667, 3.333, 3.333, -1.667]")
    print("User 3: [3.0, 0.0, 0.0, 0.0, 0.0, 0.0] - 0.5 = [2.5, -0.5, -0.5, -0.5, -0.5, -0.5]")
    
    # B∆∞·ªõc 4: SVD Decomposition
    print("\nüìä B∆Ø·ªöC 4: SVD DECOMPOSITION")
    print("-"*40)
    
    # √Åp d·ª•ng SVD v·ªõi k=2
    U, sigma, Vt = svds(ratings_demeaned, k=2)
    sigma = np.diag(sigma)
    
    print_matrix(U, "MA TR·∫¨N U (User Factors)")
    print_matrix(sigma, "MA TR·∫¨N SIGMA (Singular Values)")
    print_matrix(Vt, "MA TR·∫¨N Vt (Item Factors)")
    
    # Gi·∫£i th√≠ch
    print("\nüí° Gi·∫£i th√≠ch:")
    print("U: Ma tr·∫≠n 3x2 - m·ªói user c√≥ 2 latent factors")
    print("sigma: Ma tr·∫≠n 2x2 - ƒë·ªô quan tr·ªçng c·ªßa m·ªói factor")
    print("Vt: Ma tr·∫≠n 2x6 - m·ªói game c√≥ 2 latent factors")
    
    # B∆∞·ªõc 5: T√°i t·∫°o ma tr·∫≠n d·ª± ƒëo√°n
    print("\nüìä B∆Ø·ªöC 5: T√ÅI T·∫†O MA TR·∫¨N D·ª∞ ƒêO√ÅN")
    print("-"*40)
    
    # T√°i t·∫°o predicted ratings
    predicted_ratings = np.dot(np.dot(U, sigma), Vt) + user_ratings_mean.reshape(-1, 1)
    print_matrix(predicted_ratings, "MA TR·∫¨N D·ª∞ ƒêO√ÅN (Predicted Ratings)")
    
    # So s√°nh v·ªõi ma tr·∫≠n g·ªëc
    print("\nüìä B∆Ø·ªöC 6: SO S√ÅNH MA TR·∫¨N G·ªêC VS D·ª∞ ƒêO√ÅN")
    print("-"*40)
    
    print_matrix(user_item_matrix, "MA TR·∫¨N G·ªêC")
    print_matrix(predicted_ratings, "MA TR·∫¨N D·ª∞ ƒêO√ÅN")
    
    # T√≠nh ƒë·ªô l·ªói
    error = np.abs(user_item_matrix - predicted_ratings)
    print_matrix(error, "ƒê·ªò L·ªñI (Absolute Error)")
    
    # B∆∞·ªõc 7: T√≠nh SVD scores cho t·ª´ng game
    print("\nüìä B∆Ø·ªöC 7: T√çNH SVD SCORES CHO T·ª™NG GAME")
    print("-"*40)
    
    # Chu·∫©n h√≥a predicted ratings v·ªÅ 0-1
    svd_scores = (predicted_ratings + 1) / 2
    svd_scores = np.clip(svd_scores, 0, 1)  # ƒê·∫£m b·∫£o trong kho·∫£ng 0-1
    
    print_matrix(svd_scores, "SVD SCORES (0-1)")
    
    # Gi·∫£i th√≠ch √Ω nghƒ©a
    print("\nüí° √ù nghƒ©a SVD Scores:")
    for i in range(svd_scores.shape[0]):
        print(f"User {i+1}:")
        for j in range(svd_scores.shape[1]):
            score = svd_scores[i, j]
            print(f"  Game {j+1}: {score:.3f} ({score*100:.1f}% kh·∫£ nƒÉng th√≠ch)")
    
    # B∆∞·ªõc 8: Ph√¢n t√≠ch latent factors
    print("\nüìä B∆Ø·ªöC 8: PH√ÇN T√çCH LATENT FACTORS")
    print("-"*40)
    
    print("üéØ User Factors (U matrix):")
    for i in range(U.shape[0]):
        print(f"User {i+1}: Factor 1 = {U[i,0]:.3f}, Factor 2 = {U[i,1]:.3f}")
    
    print("\nüéØ Game Factors (Vt matrix):")
    for j in range(Vt.shape[1]):
        print(f"Game {j+1}: Factor 1 = {Vt[0,j]:.3f}, Factor 2 = {Vt[1,j]:.3f}")
    
    print("\nüéØ Singular Values (Sigma):")
    print(f"Factor 1 importance: {sigma[0,0]:.3f}")
    print(f"Factor 2 importance: {sigma[1,1]:.3f}")
    
    # B∆∞·ªõc 9: K·∫øt lu·∫≠n
    print("\nüìä B∆Ø·ªöC 9: K·∫æT LU·∫¨N")
    print("-"*40)
    
    print("üéØ SVD ƒë√£ h·ªçc ƒë∆∞·ª£c:")
    print("1. Pattern ·∫©n trong d·ªØ li·ªáu user-game")
    print("2. M·ªëi quan h·ªá gi·ªØa users v√† games")
    print("3. D·ª± ƒëo√°n rating cho games ch∆∞a t∆∞∆°ng t√°c")
    
    print("\nüéØ ·ª®ng d·ª•ng:")
    print("1. G·ª£i √Ω games m·ªõi cho user")
    print("2. T√¨m user t∆∞∆°ng t·ª±")
    print("3. Ph√¢n t√≠ch s·ªü th√≠ch ·∫©n")
    
    print("\n" + "="*80)
    print("üéâ HO√ÄN TH√ÄNH MINH H·ªåA SVD!")
    print("="*80)

if __name__ == "__main__":
    svd_step_by_step_demo()
