#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
GI·∫¢I TH√çCH SVD SCORE V√Ä T·∫†I SAO N√ì CAO
"""

import numpy as np
import pandas as pd
from sklearn.decomposition import TruncatedSVD
from sklearn.metrics.pairwise import cosine_similarity

def demonstrate_svd_calculation():
    """Minh h·ªça c√°ch t√≠nh SVD score"""
    
    print("=" * 80)
    print("SVD SCORE L√Ä G√å V√Ä C√ÅCH T√çNH")
    print("=" * 80)
    
    # V√≠ d·ª• User-Item Matrix
    print("\nüìä V√ç D·ª§ USER-ITEM MATRIX:")
    print("-" * 40)
    
    # T·∫°o ma tr·∫≠n User-Item (5 users, 6 games)
    user_item_matrix = np.array([
        [5, 3, 0, 1, 4, 2],  # User 1: ƒë√£ ch∆°i game 1,2,4,5,6
        [4, 0, 0, 1, 1, 1],  # User 2: ƒë√£ ch∆°i game 1,4,5,6
        [1, 1, 1, 0, 1, 0],  # User 3: ƒë√£ ch∆°i game 1,2,3,5
        [1, 1, 1, 1, 1, 0],  # User 4: ƒë√£ ch∆°i game 1,2,3,4,5
        [0, 0, 1, 1, 0, 1]   # User 5: ƒë√£ ch∆°i game 3,4,6
    ])
    
    game_names = ['Action', 'RPG', 'Strategy', 'Puzzle', 'Sports', 'Racing']
    user_names = ['User 1', 'User 2', 'User 3', 'User 4', 'User 5']
    
    print("User-Item Matrix (ratings 0-5):")
    df = pd.DataFrame(user_item_matrix, 
                     index=user_names, 
                     columns=game_names)
    print(df)
    
    # 1. SVD Decomposition
    print("\nüîç B∆Ø·ªöC 1: SVD DECOMPOSITION")
    print("-" * 40)
    
    # SVD v·ªõi k=2 (2 components)
    svd = TruncatedSVD(n_components=2, random_state=42)
    user_factors = svd.fit_transform(user_item_matrix)
    item_factors = svd.components_
    
    print(f"User factors shape: {user_factors.shape}")
    print(f"Item factors shape: {item_factors.shape}")
    print(f"Explained variance ratio: {svd.explained_variance_ratio_}")
    
    # 2. Reconstruct ratings
    print("\nüìà B∆Ø·ªöC 2: RECONSTRUCT RATINGS")
    print("-" * 40)
    
    # D·ª± ƒëo√°n ratings cho t·∫•t c·∫£ user-item pairs
    predicted_ratings = np.dot(user_factors, item_factors)
    
    print("Predicted ratings:")
    df_predicted = pd.DataFrame(predicted_ratings, 
                               index=user_names, 
                               columns=game_names)
    print(df_predicted.round(3))
    
    # 3. SVD Scores cho User 1
    print("\nüéØ B∆Ø·ªöC 3: SVD SCORES CHO USER 1")
    print("-" * 40)
    
    user_1_scores = predicted_ratings[0]  # User 1
    print("SVD scores cho User 1:")
    for i, (game, score) in enumerate(zip(game_names, user_1_scores)):
        print(f"  {game}: {score:.3f}")
    
    # 4. Gi·∫£i th√≠ch t·∫°i sao SVD score cao
    print("\nüí° T·∫†I SAO SVD SCORE CAO?")
    print("-" * 40)
    
    # T√¨m games c√≥ SVD score cao
    high_scores = [(game, score) for game, score in zip(game_names, user_1_scores) if score > 3.0]
    print("Games c√≥ SVD score cao (>3.0):")
    for game, score in high_scores:
        print(f"  {game}: {score:.3f}")
    
    print("\nüîç PH√ÇN T√çCH:")
    print("‚Ä¢ User 1 ƒë√£ ch∆°i: Action(5), RPG(3), Puzzle(1), Sports(4), Racing(2)")
    print("‚Ä¢ SVD t√¨m pattern: User 1 th√≠ch Action v√† Sports")
    print("‚Ä¢ Games c√≥ SVD score cao: Action, Sports (ph√π h·ª£p v·ªõi pattern)")
    print("‚Ä¢ Games c√≥ SVD score th·∫•p: Strategy (User 1 ch∆∞a ch∆°i, kh√¥ng ph√π h·ª£p)")
    
    return user_1_scores, game_names

def explain_why_svd_scores_high():
    """Gi·∫£i th√≠ch t·∫°i sao SVD score cao"""
    
    print("\n" + "=" * 80)
    print("T·∫†I SAO SVD SCORE CAO?")
    print("=" * 80)
    
    print("\nüéØ NGUY√äN NH√ÇN SVD SCORE CAO:")
    print("-" * 40)
    
    print("1. üìä PATTERN RECOGNITION:")
    print("   ‚Ä¢ SVD t√¨m ra pattern ·∫©n trong d·ªØ li·ªáu")
    print("   ‚Ä¢ Ph√°t hi·ªán user th√≠ch lo·∫°i game n√†o")
    print("   ‚Ä¢ D·ª± ƒëo√°n d·ª±a tr√™n similarity v·ªõi users kh√°c")
    
    print("\n2. üîÑ COLLABORATIVE FILTERING:")
    print("   ‚Ä¢ 'Users gi·ªëng b·∫°n c≈©ng th√≠ch game n√†y'")
    print("   ‚Ä¢ D·ª±a tr√™n l·ªãch s·ª≠ t∆∞∆°ng t√°c th·ª±c t·∫ø")
    print("   ‚Ä¢ C√≥ ƒë·ªô tin c·∫≠y cao h∆°n content-based")
    
    print("\n3. üìà MATRIX FACTORIZATION:")
    print("   ‚Ä¢ Ph√¢n t√≠ch ma tr·∫≠n User-Item")
    print("   ‚Ä¢ T√¨m latent factors (y·∫øu t·ªë ·∫©n)")
    print("   ‚Ä¢ D·ª± ƒëo√°n ch√≠nh x√°c h∆°n")
    
    print("\n4. üéÆ GAME RECOMMENDATION CONTEXT:")
    print("   ‚Ä¢ User ƒë√£ ch∆°i nhi·ªÅu games t∆∞∆°ng t·ª±")
    print("   ‚Ä¢ Pattern r√µ r√†ng trong preferences")
    print("   ‚Ä¢ SVD score ph·∫£n √°nh ƒë√∫ng s·ªü th√≠ch")
    
    print("\nüí° V√ç D·ª§ C·ª§ TH·ªÇ:")
    print("-" * 40)
    print("‚Ä¢ User th√≠ch: Action, RPG, Strategy")
    print("‚Ä¢ SVD ph√°t hi·ªán: User th√≠ch 'complex games'")
    print("‚Ä¢ Games c√≥ SVD score cao: Action, RPG, Strategy")
    print("‚Ä¢ Games c√≥ SVD score th·∫•p: Puzzle, Casual")

def demonstrate_svd_vs_other_scores():
    """So s√°nh SVD v·ªõi c√°c scores kh√°c"""
    
    print("\n" + "=" * 80)
    print("SO S√ÅNH SVD V·ªöI C√ÅC SCORES KH√ÅC")
    print("=" * 80)
    
    # V√≠ d·ª• scores
    print("\nüìä V√ç D·ª§ SCORES CHO 1 GAME:")
    print("-" * 40)
    
    scores = {
        'SVD': 0.676,
        'Content': 0.323,
        'Demographic': 0.279,
        'Keyword': 0.000
    }
    
    print("Assassin's Creed Valhalla scores:")
    for score_type, value in scores.items():
        print(f"  {score_type}: {value:.3f}")
    
    print("\nüîç PH√ÇN T√çCH:")
    print("-" * 40)
    print("‚Ä¢ SVD (0.676): CAO NH·∫§T - User c√≥ pattern t∆∞∆°ng t·ª±")
    print("‚Ä¢ Content (0.323): TRUNG B√åNH - Game c√≥ ƒë·∫∑c ƒëi·ªÉm ph√π h·ª£p")
    print("‚Ä¢ Demographic (0.279): TRUNG B√åNH - User profile ph√π h·ª£p")
    print("‚Ä¢ Keyword (0.000): TH·∫§P - Kh√¥ng match keyword")
    
    print("\nüí° T·∫†I SAO SVD CAO NH·∫§T?")
    print("-" * 40)
    print("1. D·ª±a tr√™n l·ªãch s·ª≠ th·ª±c t·∫ø c·ªßa user")
    print("2. Ph√°t hi·ªán pattern ·∫©n trong preferences")
    print("3. C√≥ ƒë·ªô tin c·∫≠y cao (collaborative filtering)")
    print("4. Ph·∫£n √°nh ƒë√∫ng s·ªü th√≠ch user")

if __name__ == "__main__":
    # Ch·∫°y v√≠ d·ª•
    user_scores, games = demonstrate_svd_calculation()
    explain_why_svd_scores_high()
    demonstrate_svd_vs_other_scores()
    
    print("\n" + "=" * 80)
    print("K·∫æT LU·∫¨N")
    print("=" * 80)
    print("SVD score cao v√¨:")
    print("1. D·ª±a tr√™n l·ªãch s·ª≠ t∆∞∆°ng t√°c th·ª±c t·∫ø")
    print("2. Ph√°t hi·ªán pattern ·∫©n trong preferences")
    print("3. Collaborative filtering c√≥ ƒë·ªô tin c·∫≠y cao")
    print("4. Ph·∫£n √°nh ƒë√∫ng s·ªü th√≠ch user")
    print("5. C√≥ tr·ªçng s·ªë cao trong hybrid score (35-45%)")
